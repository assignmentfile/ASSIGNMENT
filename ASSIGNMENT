•	Use Terraform to provision a AWS environment with the following components:

o	One VPC with two subnets (public and private).

provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "main-vpc"
  }
}

resource "aws_subnet" "public" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"  # Change as needed

  tags = {
    Name = "public-subnet"
  }
}

resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1a"  # Change as needed

  tags = {
    Name = "private-subnet"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}

output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_id" {
  value = aws_subnet.public.id
}

output "private_subnet_id" {
  value = aws_subnet.private.id
}


Steps to Deploy:
Save the above configuration in a file named main.tf.
Initialize Terraform: Run terraform init.
Plan the deployment: Run terraform plan.
Apply the configuration: Run terraform apply.

A Compute Engine instance in the public subnet with a web server installed (e.g., Nginx or Apache).

provider "google" {
  project = "your-gcp-project-id"  # Replace with your GCP project ID
  region  = "us-central1"            # Change to your desired region
}

resource "google_compute_instance" "web_server" {
  name         = "nginx-server"
  machine_type = "f1-micro"  # Change to your desired machine type
  zone         = "us-central1-a"  # Change as needed

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"  # Use a Debian image
    }
  }

  network_interface {
    network    = "default"  # Replace with your VPC network name
    subnetwork = "default"   # Replace with your public subnet name
    access_config {
      // Ephemeral public IP
    }
  }

  metadata_startup_script = <<-EOF
    #! /bin/bash
    apt-get update
    apt-get install -y nginx
    systemctl start nginx
    systemctl enable nginx
  EOF

  tags = ["http-server"]  # Tag for firewall rules
}

resource "google_compute_firewall" "allow_http" {
  name    = "allow-http"
  network = "default"  # Replace with your VPC network name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]  # Allow traffic from anywhere
}

output "instance_ip" {
  value = google_compute_instance.web_server.network_interface[0].access_config[0].nat_ip
}

Steps to Deploy:
Save the above configuration in a file named main.tf.
Initialize Terraform: Run terraform init.
Plan the deployment: Run terraform plan.
Apply the configuration: Run terraform apply.


Firewall rules that allow HTTP/HTTPS traffic to the instance

provider "google" {
  project = "your-gcp-project-id"  # Replace with your GCP project ID
  region  = "us-central1"            # Change to your desired region
}

resource "google_compute_instance" "web_server" {
  name         = "nginx-server"
  machine_type = "f1-micro"  # Change to your desired machine type
  zone         = "us-central1-a"  # Change as needed

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"  # Use a Debian image
    }
  }

  network_interface {
    network    = "default"  # Replace with your VPC network name
    subnetwork = "default"   # Replace with your public subnet name
    access_config {
      // Ephemeral public IP
    }
  }

  metadata_startup_script = <<-EOF
    #! /bin/bash
    apt-get update
    apt-get install -y nginx
    systemctl start nginx
    systemctl enable nginx
  EOF

  tags = ["http-server", "https-server"]  # Tags for firewall rules
}

resource "google_compute_firewall" "allow_http" {
  name    = "allow-http"
  network = "default"  # Replace with your VPC network name

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]  # Allow traffic from anywhere
}

resource "google_compute_firewall" "allow_https" {
  name    = "allow-https"
  network = "default"  # Replace with your VPC network name

  allow {
    protocol = "tcp"
    ports    = ["443"]
  }

  source_ranges = ["0.0.0.0/0"]  # Allow traffic from anywhere
}

output "instance_ip" {
  value = google_compute_instance.web_server.network_interface[0].access_config[0].nat_ip
}

Steps to Deploy:
Save the above configuration in a file named main.tf.
Initialize Terraform: Run  terraform init.
Plan the deployment: Run terraform plan.
Apply the configuration: Run terraform apply.

Set up a basic CI/CD pipeline using AWS CLOUD Build or Jenkins to deploy a simple web application on Configure the pipeline to
	Pull code from a Git repository.

1.	AWS Account: Ensure you have an AWS account.
2.	IAM Permissions: Ensure you have the necessary IAM permissions to create CodeBuild projects, IAM roles, and other resources.
3.	Git Repository: Have a Git repository (e.g., GitHub) with your web application code.
Steps to Set Up the CI/CD Pipeline
`: Create an IAM Role for CodeBuild
1.	Go to the IAM console in AWS.
2.	Create a new role.
3.	Choose "CodeBuild" as the trusted entity.
4.	Attach the following policies:
•	AWSCodeBuildAdminAccess
•	AmazonS3FullAccess (if you need to store build artifacts in S3)
•	AWSCodePipelineReadOnlyAccess (if using CodePipeline)
5.	Name the role (e.g., CodeBuildServiceRole) and create it.
: Create a CodeBuild Project
1.	Go to the AWS CodeBuild console.
2.	Click on "Create build project."
3.	Fill in the project details:
•	Project name: e.g., MyWebAppBuild
•	Source provider: Choose "GitHub" or "GitHub Enterprise."
•	Repository: Provide the URL of your Git repository.
•	Environment: Choose the environment image (e.g., aws/codebuild/standard:5.0).
•	Service role: Select the IAM role you created earlier.
4.	In the "Buildspec" section, you can either use a buildspec.yml file from your repository or define the build commands directly in the console.
Example buildspec.yml
Create a buildspec.yml file in your repository root with the following content:
yamlCopy
________________________________________
version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 14  # Change to your application's runtime
    commands:
      - echo Installing dependencies...
      - npm install  # Change to your application's build command
  build:
    commands:
      - echo Building the application...
      - npm run build  # Change to your application's build command
artifacts:
  files:
    - '**/*'  # Adjust to specify which files to include in the build artifacts
Step 3: Create a CodePipeline (Optional)
If you want to automate the deployment process further, you can create a CodePipeline that triggers the build on code changes.
1.	Go to the AWS CodePipeline console.
2.	Click on "Create pipeline."
3.	Fill in the pipeline details:
•	Pipeline name: e.g., MyWebAppPipeline
•	Service role: Create a new role or use an existing one.
4.	In the "Add source stage":
•	Source provider: Choose "GitHub."
•	Repository: Provide the URL of your Git repository.
•	Branch: Specify the branch to monitor for changes.
5.	In the "Add build stage":
•	Build provider: Choose "AWS CodeBuild."
•	Build project: Select the CodeBuild project you created earlier.
6.	Review and create the pipeline.
Step 4: Trigger the Pipeline
•	Once the pipeline is set up, any changes pushed to the specified branch in your Git repository will trigger the pipeline, pulling the latest code and building the application.
Step 5: Deploy the Application
•	Depending on your application, you can add additional stages in CodePipeline to deploy the built application to services like AWS Elastic Beanstalk, Amazon ECS, or an S3 bucket for static websites.


Set up a basic CI/CD pipeline using AWS CLOUD Build or Jenkins to deploy a simple web application on Configure the pipeline to
	Pull code from a Git repository.

AWS CodeBuild and CodePipeline

1. Create a Git repository:
    - Create a new repository on GitHub or AWS CodeCommit.
    - Add your web application code to the repository.
2. Create an AWS CodeBuild project:
    - Log in to the AWS Management Console and navigate to the CodeBuild dashboard.
    - Click "Create project" and enter a project name.
    - Select "Git" as the source provider and connect your repository.
    - Choose a build environment (e.g., Ubuntu) and specify the build commands (e.g., npm install and npm run build).
    - Click "Create project".
3. Create an AWS CodePipeline pipeline:
    - Navigate to the CodePipeline dashboard.
    - Click "Create pipeline" and enter a pipeline name.
    - Select "Git" as the source provider and connect your repository.
    - Add a "Build" stage and select the CodeBuild project created in Step 2.
    - Add a "Deploy" stage and select "AWS S3" as the deployment provider.
    - Configure the deployment settings (e.g., bucket name and folder).
    - Click "Create pipeline".
4. Configure the pipeline to pull code from Git:
    - In the pipeline settings, click "Edit" next to the "Source" stage.
    - Select "Git" as the source provider and connect your repository.
    - Enter the repository URL and branch name (e.g., main).
    - Click "Save changes".

Jenkins

1. Install Jenkins and configure the Git plugin:
    - Install Jenkins on a server or use a Jenkins cloud instance.
    - Configure the Git plugin to connect to your repository.
2. Create a Jenkins job:
    - Create a new job and select "Pipeline".
    - Configure the pipeline to pull from your Git repository.
    - Add the following stages to your pipeline:
        - Build:
            - Install dependencies: npm install
            - Build application: npm run build
        - Test:
            - Run tests: npm run test
        - Deploy:
            - Deploy to S3: aws s3 sync
3. Configure the pipeline to build and test the application:
    - In the pipeline settings, configure the "Build" stage to run the build commands.
    - Configure the "Test" stage to run the test commands.
In both cases, the pipeline will automatically trigger when code is pushed to the Git repository, build and test the application, and deploy it to S3.

•Set up a basic CI/CD pipeline using AWS Cloud Build or Jenkins to deploy a simple web application to Deploy the application to the Compute Engine instance.

AWS CodeBuild and CodePipeline

1. Create a Git repository:
    - Create a new repository on GitHub or AWS CodeCommit.
    - Add your web application code to the repository.
2. Create an AWS CodeBuild project:
    - Log in to the AWS Management Console and navigate to the CodeBuild dashboard.
    - Click "Create project" and enter a project name.
    - Select "Git" as the source provider and connect your repository.
    - Choose a build environment (e.g., Ubuntu) and specify the build commands:
        - Install dependencies: npm install
        - Build application: npm run build
    - Click "Create project".
3. Create an AWS CodePipeline pipeline:
    - Navigate to the CodePipeline dashboard.
    - Click "Create pipeline" and enter a pipeline name.
    - Select "Git" as the source provider and connect your repository.
    - Add a "Build" stage and select the CodeBuild project created in Step 2.
    - Add a "Deploy" stage and select "Google Compute Engine" as the deployment provider.
    - Configure the deployment settings:
        - Instance name: your Compute Engine instance name
        - Zone: your Compute Engine instance zone
        - Deployment script: scp -r build/ user@instance-ip:/var/www/html
    - Click "Create pipeline".

Jenkins

1. Install Jenkins and configure the Git plugin:
    - Install Jenkins on a server or use a Jenkins cloud instance.
    - Configure the Git plugin to connect to your repository.
2. Create a Jenkins job:
    - Create a new job and select "Pipeline".
    - Configure the pipeline to pull from your Git repository.
    - Add the following stages to your pipeline:
        - Build:
            - Install dependencies: npm install
            - Build application: npm run build
        - Deploy:
            - Deploy to Compute Engine: scp -r build/ user@instance-ip:/var/www/html
3. Configure the pipeline to deploy to Compute Engine:
    - In the pipeline settings, configure the "Deploy" stage to deploy to your Compute Engine instance.
In both cases, the pipeline will automatically trigger when code is pushed to the Git repository, build the application, and deploy it to your Compute Engine instance.

	Set up a basic CI/CD pipeline using AWS Cloud Build or Jenkins to deploy a simple web application on Include automated tests and ensure they pass before deployment.

AWS CodeBuild and CodePipeline

1. Create a Git repository:
    - Create a new repository on GitHub or AWS CodeCommit.
    - Add your web application code to the repository.
    - Add automated tests (e.g., unit tests, integration tests) to the repository.
2. Create an AWS CodeBuild project:
    - Log in to the AWS Management Console and navigate to the CodeBuild dashboard.
    - Click "Create project" and enter a project name.
    - Select "Git" as the source provider and connect your repository.
    - Choose a build environment (e.g., Ubuntu) and specify the build commands:
        - Install dependencies: npm install
        - Run tests: npm run test
        - Build application: npm run build
    - Click "Create project".
3. Create an AWS CodePipeline pipeline:
    - Navigate to the CodePipeline dashboard.
    - Click "Create pipeline" and enter a pipeline name.
    - Select "Git" as the source provider and connect your repository.
    - Add a "Build" stage and select the CodeBuild project created in Step 2.
    - Add a "Test" stage and select "CodeBuild" as the test provider.
    - Configure the test settings:
        - Test commands: npm run test
    - Add a "Deploy" stage and select "AWS S3" as the deployment provider.
    - Configure the deployment settings (e.g., bucket name and folder).
    - Click "Create pipeline".

Jenkins

1. Install Jenkins and configure the Git plugin:
    - Install Jenkins on a server or use a Jenkins cloud instance.
    - Configure the Git plugin to connect to your repository.
2. Create a Jenkins job:
    - Create a new job and select "Pipeline".
    - Configure the pipeline to pull from your Git repository.
    - Add the following stages to your pipeline:
        - Build:
            - Install dependencies: npm install
            - Build application: npm run build
        - Test:
            - Run tests: npm run test
        - Deploy:
            - Deploy to S3: aws s3 sync
3. Configure the pipeline to run automated tests:
    - In the pipeline settings, configure the "Test" stage to run the automated tests.
    - Ensure the tests pass before proceeding to the deployment stage.
In both cases, the pipeline will automatically trigger when code is pushed to the Git repository, run automated tests, and deploy the application to S3 only if the tests pass.

•	Integrate Google Cloud Monitoring to monitor the instance's CPU, memory, and disk usage.

1. Create a CloudWatch dashboard:
    - Log in to the AWS Management Console and navigate to the CloudWatch dashboard.
    - Click "Create dashboard" and enter a name for your dashboard.
2. Add metrics to the dashboard:
    - Click "Add widget" and select "Metrics".
    - Choose the instance's namespace (e.g., "AWS/EC2") and select the desired metrics:
        - CPUUtilization
        - MemoryUtilization
        - DiskSpaceUtilization
    - Configure the metric settings (e.g., statistic, period, and unit).
3. Create alarms for threshold breaches:
    - Click "Create alarm" and enter a name for your alarm.
    - Select the metric and set the threshold values (e.g., CPU utilization > 70%).
    - Choose the notification settings (e.g., SNS topic or email).
4. Associate the instance with the dashboard:
    - Navigate to the EC2 dashboard and select the instance.
    - Click "Actions" and select "Monitor with CloudWatch".
    - Choose the dashboard created in step 1.
5. Install the CloudWatch agent:
    - Install the CloudWatch agent on your instance.
    - Follow the installation instructions for your operating system.
6. Configure the CloudWatch agent:
    - Configure the agent to collect CPU, memory, and disk usage metrics.
    - Follow the configuration instructions for your operating system.

Now, your instance's CPU, memory, and disk usage will be monitored by CloudWatch, and you'll receive notifications if threshold values are breached.

Jenkins Integration

1. Install the CloudWatch plugin:
    - Log in to your Jenkins instance and navigate to the plugin manager.
    - Search for "CloudWatch" and install the plugin.
2. Configure the CloudWatch plugin:
    - Navigate to the Jenkins configuration page.
    - Scroll down to the "CloudWatch" section and enter your AWS credentials.
    - Select the region and namespace (e.g., "AWS/EC2").
3. Add a CloudWatch post-build action:
    - Create a new Jenkins job or edit an existing one.
    - Add a post-build action and select "CloudWatch".
    - Choose the metrics and settings to monitor.
Now, Jenkins will display the metrics and trigger alarms if threshold values are breached.

Set up a basic alert to notify you via email if CPU usage exceeds 80%

1. Log in to the AWS Management Console and navigate to the CloudWatch dashboard.
2. Click "Alarms" and then "Create alarm".
3. Select "EC2" as the metric namespace and choose "CPUUtilization" as the metric.
4. Set the threshold to 80% and choose "Greater than or equal to" as the comparison operator.
5. Set the evaluation period to 5 minutes and the statistic to "Average".
6. Click "Create alarm" and enter a name and description for the alarm.
7. In the "Actions" section, click "Add action" and select "SNS topic".
8. Enter your email address and click "Create topic".
9. Click "Create alarm" to save the alarm.

Google Cloud Monitoring

1. Log in to the Google Cloud Console and navigate to the Monitoring dashboard.
2. Click "Alerts" and then "Create alert".
3. Select "VM instance" as the resource type and choose "CPU usage" as the metric.
4. Set the threshold to 80% and choose "Above" as the comparison operator.
5. Set the duration to 5 minutes and the alignment period to 1 minute.
6. Click "Create alert" and enter a name and description for the alert.
7. In the "Notifications" section, click "Add notification" and select "Email".
8. Enter your email address and click "Create".

Jenkins

1. Install the CloudWatch or Google Cloud Monitoring plugin in Jenkins.
2. Configure the plugin to connect to your AWS or Google Cloud account.
3. Create a new Jenkins job or edit an existing one.
4. Add a post-build action and select "CloudWatch" or "Google Cloud Monitoring".
5. Choose the metric and settings to monitor (e.g., CPU usage > 80%).
6. Enter your email address in the notification settings.

Now, you'll receive an email notification if CPU usage exceeds 80% for more than 5 minutes
